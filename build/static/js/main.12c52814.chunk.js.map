{"version":3,"sources":["Constants.js","components/ClickableImages.js","components/TodayTemperature.js","components/EachDayTemperature.js","components/FiveDaysTemperature.js","App.js","serviceWorker.js","index.js"],"names":["CITIES","Sydney","lat","lon","Brisbane","Melbourne","Snowy Mountains","API_KEY","CITIES_NAMES","TODAY_DATE","moment","Buttons","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","goToPreviousCity","e","currentIndex","Constants","length","weatherDataHandler","goToNextCity","react_default","a","createElement","className","src","alt","onClick","concat","weatherType","React","Component","TodayTemperature","title","ClickableImages","temperatureStatus","temp","min_temp","max_temp","weather","description","EachDayTemperature","dayName","maxTemp","minTemp","FiveDaysTemperature","getFormattedDate","numAddToCurrentDate","currentDate","clone","add","format","slice","_this2","num","fiveDaysList","map","eachDay","components_EachDayTemperature","key","weatherIconSelector","code","App","state","undefined","sixDaysTempData","Number","toString","getWeatherData","cityName","url","fetch","then","res","json","data","console","log","filter","value","index","setState","getWeatherDataHandler","preventDefault","components_TodayTemperature","components_FiveDaysTemperature","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12c52814.chunk.js","sourcesContent":["import moment from 'moment';\n\nexport const CITIES = {\n    \"Sydney\": {\n      lat: \"-33.8688\",\n      lon: \"151.2093\"\n    },\n    \"Brisbane\": {\n      lat: \"-27.4698\",\n      lon: \"153.0251\"\n    },\n    \"Melbourne\": {\n      lat: \"-37.8136\",\n      lon: \"144.9631\"\n    },\n    \"Snowy Mountains\": {\n      lat: \"-36.5000\",\n      lon: \"148.3333\"\n    }\n  };\n  \n//export const API_KEY = \"wSo0LRcHZMmsh4rXshasAImNK7Ulp19zkGQjsnUjeMXsnpyilC\";\nexport const API_KEY = \"1ac3850d9d894febb91fbbba93db78a7\";\nexport const CITIES_NAMES = [\"Sydney\", \"Brisbane\", \"Melbourne\", \"Snowy Mountains\"];\nexport const TODAY_DATE = moment();","import React from \"react\";\nimport * as Constants from '../Constants';\n\nclass Buttons extends React.Component {\n\n     constructor(props){\n       super(props);\n\n       this.currentIndex = 0;\n     }\n\n    goToPreviousCity = (e) => {\n      this.currentIndex =\n      this.currentIndex === 0 ? Constants.CITIES_NAMES.length - 1 : this.currentIndex - 1;\n      this.props.weatherDataHandler(\n        Constants.CITIES[this.currentIndex],\n        e)\n\n       \n    }\n\n    goToNextCity = (e) => {\n      \n      this.currentIndex =\n      this.currentIndex === Constants.CITIES_NAMES.length - 1 ? 0 : this.currentIndex + 1;\n   \n      this.props.weatherDataHandler(\n        Constants.CITIES_NAMES[this.currentIndex],\n        e)\n    }\n\n    render(){\n        return (\n            <div className=\"main-icons\">\n              <img\n                className=\"arrow-image arrow-image-left\"\n                src=\"https://bit.ly/webApp_Assets_leftArrow\"\n                alt=\"Left arrow button\"\n                onClick= {this.goToPreviousCity}\n              />\n              <img className=\"big-image\" alt=\"Weather icon\"\n              src={`https://bit.ly/webApp_Assets_${this.props.weatherType}`} />\n              <img\n                className=\"arrow-image arrow-image-right\"\n                src=\"https://bit.ly/webApp_Assets_rightArrow\"\n                alt=\"Rigth arrow button\"\n                onClick = {this.goToNextCity}\n              />        \n            </div>\n          );\n    }\n}\n\nexport default Buttons;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ClickableImages from './ClickableImages';\n\nconst TodayTemperature = props => {\n  return (\n    <div>\n      <h1 className=\"city-title\">{props.title}</h1>\n      <ClickableImages \n          weatherType = {props.weatherType}\n          weatherDataHandler = {props.weatherDataHandler}></ClickableImages>\n      <p className=\"current-temp\">{props.temperatureStatus.temp}°</p>\n      <div className=\"range\">\n        <p className=\"low-temp\">{props.temperatureStatus.min_temp}°</p>\n        <p className=\"high-temp\">{props.temperatureStatus.max_temp}°</p>\n      </div>\n      <p className=\"weatherCondition\">{props.temperatureStatus.weather.description}</p>\n    </div>\n  )\n}\n\nTodayTemperature.propTypes = {\n  title: PropTypes.string.isRequired\n}\n\nexport default TodayTemperature\n\n\n","import React from \"react\";\n\nconst EachDayTemperature = props => {\n\n  \n  return (\n    <div>\n      <p className=\"week-day\">{props.dayName}</p>\n      <img\n        className=\"small-image\"\n        src={`https://bit.ly/webApp_Assets_${props.weatherType}`}\n        alt=\"Sunny icon\"\n      />\n      <p className=\"week-temperature\">{props.maxTemp}/{props.minTemp}</p>\n    </div>\n  );\n};\n\nexport default EachDayTemperature;\n","import React, {Component} from 'react'\nimport * as Constants from '../Constants'\nimport EachDayTemperature from './EachDayTemperature';\n\nclass FiveDaysTemperature extends Component{\n    getFormattedDate = (numAddToCurrentDate, currentDate) => {\n        return currentDate\n        .clone()\n        .add(numAddToCurrentDate, \"days\")\n        .format(\"dddd\")\n        .slice(0, 3);\n      }\n\n    render(){\n        let num = 0;\n        return (\n            <div className=\"five-day-forecast\">\n            {this.props.fiveDaysList.map( eachDay => {\n                num = num+1;\n                return <EachDayTemperature\n                             key={num}\n                             dayName={this.getFormattedDate(num,Constants.TODAY_DATE)}\n                             weatherType={this.props.weatherIconSelector(eachDay.weather.code)}\n                             maxTemp={eachDay.max_temp}\n                             minTemp={eachDay.min_temp}/>\n            })}\n            </div>\n      )\n    }\n    \n  \n}\n\nexport default FiveDaysTemperature\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodayTemperature from './components/TodayTemperature';\nimport * as Constants from './Constants';\nimport FiveDaysTemperature from './components/FiveDaysTemperature';\n\n\nclass App extends Component {\n  \n  state = {\n    title: \"Sydney\",\n    code: undefined,\n    sixDaysTempData:undefined,\n    temperatureStatus: undefined\n  }\n\n  weatherIconSelector = code => {\n    if (code === 800) {\n      return \"sunny\";\n    }\n  \n    switch (Number(code.toString()[0])) {\n      case 2:\n        return \"thunderStorm\";\n      case 3:\n      case 5:\n        return \"rain\";\n      case 6:\n        return \"snow\";\n      case 7:\n      case 8:\n        return \"cloudy\";\n      default:\n    }\n  }\n\n\n\n  getWeatherData = (cityName) => {\n    //let url = `https://weatherbit-v1-mashape.p.mashape.com/forecast/daily?lat=${Constants.CITIES[cityName].lat}&lon=${Constants.CITIES[cityName].lon}`;\n      let url = `https://api.weatherbit.io/v2.0/forecast/daily?lat=${Constants.CITIES[cityName].lat}&lon=${Constants.CITIES[cityName].lon}&key=${Constants.API_KEY}`;\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {   \n        console.log(data)\n        const sixDaysTempData = data.data.filter((value, index) => index < 6);\n        this.setState({\n          title: cityName,\n          code: data.data[0].weather.code,\n          sixDaysTempData,\n          temperatureStatus: data.data[0]\n        })\n      })   \n  }\n\n  getWeatherDataHandler = (cityName,e) => {\n    e.preventDefault();\n    this.getWeatherData(cityName);\n  }\n  \n  \n  componentDidMount() {\n    this.getWeatherData(\"Sydney\");\n\n  }\n  \n  render() {\n    return (!this.state.sixDaysTempData && !this.state.temperatureStatus)?\n        <div className=\"loader-wrapper\">\n          <div className=\"lds-dual-ring\"></div>\n        </div> :(\n       <div className=\"App\">\n         <TodayTemperature \n            title={this.state.title}\n            temperatureStatus={this.state.temperatureStatus} \n            weatherType={this.weatherIconSelector(this.state.temperatureStatus.weather.code)}\n            weatherDataHandler = {this.getWeatherDataHandler}\n            />\n         <hr/>\n         <FiveDaysTemperature fiveDaysList={this.state.sixDaysTempData.slice(1)} weatherIconSelector={this.weatherIconSelector}/>\n       </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}